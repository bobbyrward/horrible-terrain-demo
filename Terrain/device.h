#pragma once

#include "comptr.h"
#include "vertexbuffer.h"
#include "indexbuffer.h"
#include "font.h"

namespace d3ddfw {
    class _D3D9Device
        : public IDirect3DDevice9Ptr
    {
    private:
        unsigned long long primitiveCount_;

    public:
        /* Wrapped Drawing methods for primitive counting */
		HRESULT BeginScene() {
            primitiveCount_ = 0;
			return (*this)->BeginScene();
		}

		HRESULT EndScene() {
			return (*this)->EndScene();
		}

        unsigned long long primitiveCount() const {
            return primitiveCount_;
        }

		HRESULT DrawPrimitive(D3DPRIMITIVETYPE PrimitiveType,UINT StartVertex,UINT PrimitiveCount) {
            primitiveCount_ += PrimitiveCount;
			return (*this)->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount);
		}

		HRESULT DrawIndexedPrimitive(D3DPRIMITIVETYPE Type,INT BaseVertexIndex,UINT MinVertexIndex,UINT NumVertices,UINT startIndex,UINT primCount) {
            primitiveCount_ += primCount;
			return (*this)->DrawIndexedPrimitive(Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
		}

		HRESULT DrawPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType,UINT PrimitiveCount,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) {
            primitiveCount_ += PrimitiveCount;
			return (*this)->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride);
		}

		HRESULT DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType,UINT MinVertexIndex,UINT NumVertices,UINT PrimitiveCount,CONST void* pIndexData,D3DFORMAT IndexDataFormat,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) {
            primitiveCount_ += PrimitiveCount;
			return (*this)->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride);
		}

    public:
        /* Wrapped Creation functions */ 
        IDirect3DVertexDeclaration9Ptr CreateVertexDeclaration(D3DVERTEXELEMENT9 const *elements) {
            IDirect3DVertexDeclaration9Ptr decl;

            HRESULT hr = (*this)->CreateVertexDeclaration(elements, &decl);

            if(FAILED(hr)) {
                return IDirect3DVertexDeclaration9Ptr();
            }

            return decl;
        }

        D3D9VertexBuffer CreateVertexBuffer(UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool) {
            D3D9VertexBuffer vb;

            HRESULT hr = (*this)->CreateVertexBuffer(Length, Usage, FVF, Pool, &vb, NULL);

            if(FAILED(hr)) {
                return D3D9VertexBuffer();
            }

            return vb;
        }

        D3D9IndexBuffer CreateIndexBuffer(UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool) {
            D3D9IndexBuffer ib;

            HRESULT hr = (*this)->CreateIndexBuffer(Length, Usage, Format, Pool, &ib, NULL);

            if(FAILED(hr)) {
                return D3D9IndexBuffer();
            }

            return ib;
        }

        D3DXFont D3DXCreateFontIndirect(CONST D3DXFONT_DESC *pLogFont) {
            D3DXFont font;

            HRESULT hr = ::D3DXCreateFontIndirect(*(this), pLogFont, &font);

            if(FAILED(hr)) {
                return D3DXFont();
            }

            return font;
        }


        /* BEGIN AUTOGENERATED METHOD CALLS */
        #include "device_method_calls.h"
        /* END AUTOGENERATED METHOD CALLS */
    };

    typedef std::tr1::shared_ptr<_D3D9Device>   D3D9Device;

}

