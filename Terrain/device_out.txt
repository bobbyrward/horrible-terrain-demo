		HRESULT CreateOffscreenPlainSurface(UINT Width,UINT Height,D3DFORMAT Format,D3DPOOL Pool,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) {
			return (*this)->CreateOffscreenPlainSurface(Width, Height, Format, Pool, ppSurface, pSharedHandle);
		}

		HRESULT CreatePixelShader(CONST DWORD* pFunction,IDirect3DPixelShader9** ppShader) {
			return (*this)->CreatePixelShader(pFunction, ppShader);
		}

		HRESULT CreateQuery(D3DQUERYTYPE Type,IDirect3DQuery9** ppQuery) {
			return (*this)->CreateQuery(Type, ppQuery);
		}

		HRESULT CreateRenderTarget(UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Lockable,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) {
			return (*this)->CreateRenderTarget(Width, Height, Format, MultiSample, MultisampleQuality, Lockable, ppSurface, pSharedHandle);
		}

		HRESULT CreateStateBlock(D3DSTATEBLOCKTYPE Type,IDirect3DStateBlock9** ppSB) {
			return (*this)->CreateStateBlock(Type, ppSB);
		}

		HRESULT CreateTexture(UINT Width,UINT Height,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DTexture9** ppTexture,HANDLE* pSharedHandle) {
			return (*this)->CreateTexture(Width, Height, Levels, Usage, Format, Pool, ppTexture, pSharedHandle);
		}

		HRESULT CreateVertexShader(CONST DWORD* pFunction,IDirect3DVertexShader9** ppShader) {
			return (*this)->CreateVertexShader(pFunction, ppShader);
		}

		HRESULT CreateVolumeTexture(UINT Width,UINT Height,UINT Depth,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DVolumeTexture9** ppVolumeTexture,HANDLE* pSharedHandle) {
			return (*this)->CreateVolumeTexture(Width, Height, Depth, Levels, Usage, Format, Pool, ppVolumeTexture, pSharedHandle);
		}

		HRESULT DeletePatch(UINT Handle) {
			return (*this)->DeletePatch(Handle);
		}

		HRESULT DrawIndexedPrimitive(D3DPRIMITIVETYPE Type,INT BaseVertexIndex,UINT MinVertexIndex,UINT NumVertices,UINT startIndex,UINT primCount) {
			return (*this)->DrawIndexedPrimitive(Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
		}

		HRESULT DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType,UINT MinVertexIndex,UINT NumVertices,UINT PrimitiveCount,CONST void* pIndexData,D3DFORMAT IndexDataFormat,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) {
			return (*this)->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride);
		}

		HRESULT DrawPrimitive(D3DPRIMITIVETYPE PrimitiveType,UINT StartVertex,UINT PrimitiveCount) {
			return (*this)->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount);
		}

		HRESULT DrawPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType,UINT PrimitiveCount,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) {
			return (*this)->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride);
		}

		HRESULT DrawRectPatch(UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo) {
			return (*this)->DrawRectPatch(Handle, pNumSegs, pRectPatchInfo);
		}

		HRESULT DrawTriPatch(UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo) {
			return (*this)->DrawTriPatch(Handle, pNumSegs, pTriPatchInfo);
		}

		HRESULT EndScene() {
			return (*this)->EndScene();
		}

		HRESULT EndStateBlock(IDirect3DStateBlock9** ppSB) {
			return (*this)->EndStateBlock(ppSB);
		}

		HRESULT EvictManagedResources() {
			return (*this)->EvictManagedResources();
		}

		HRESULT GetBackBuffer(UINT iSwapChain,UINT iBackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface9** ppBackBuffer) {
			return (*this)->GetBackBuffer(iSwapChain, iBackBuffer, Type, ppBackBuffer);
		}

		HRESULT GetClipPlane(DWORD Index,float* pPlane) {
			return (*this)->GetClipPlane(Index, pPlane);
		}

		HRESULT GetClipStatus(D3DCLIPSTATUS9* pClipStatus) {
			return (*this)->GetClipStatus(pClipStatus);
		}

		HRESULT GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS *pParameters) {
			return (*this)->GetCreationParameters(pParameters);
		}

		HRESULT GetCurrentTexturePalette(UINT *PaletteNumber) {
			return (*this)->GetCurrentTexturePalette(PaletteNumber);
		}

		HRESULT GetDepthStencilSurface(IDirect3DSurface9** ppZStencilSurface) {
			return (*this)->GetDepthStencilSurface(ppZStencilSurface);
		}

		HRESULT GetDeviceCaps(D3DCAPS9* pCaps) {
			return (*this)->GetDeviceCaps(pCaps);
		}

		HRESULT GetDirect3D(IDirect3D9** ppD3D9) {
			return (*this)->GetDirect3D(ppD3D9);
		}

		HRESULT GetDisplayMode(UINT iSwapChain,D3DDISPLAYMODE* pMode) {
			return (*this)->GetDisplayMode(iSwapChain, pMode);
		}

		HRESULT GetFVF(DWORD* pFVF) {
			return (*this)->GetFVF(pFVF);
		}

		HRESULT GetFrontBufferData(UINT iSwapChain,IDirect3DSurface9* pDestSurface) {
			return (*this)->GetFrontBufferData(iSwapChain, pDestSurface);
		}

		HRESULT GetIndices(IDirect3DIndexBuffer9** ppIndexData) {
			return (*this)->GetIndices(ppIndexData);
		}

		HRESULT GetLight(DWORD Index,D3DLIGHT9* pLight) {
			return (*this)->GetLight(Index, pLight);
		}

		HRESULT GetLightEnable(DWORD Index,BOOL* pEnable) {
			return (*this)->GetLightEnable(Index, pEnable);
		}

		HRESULT GetMaterial(D3DMATERIAL9* pMaterial) {
			return (*this)->GetMaterial(pMaterial);
		}

		HRESULT GetPaletteEntries(UINT PaletteNumber,PALETTEENTRY* pEntries) {
			return (*this)->GetPaletteEntries(PaletteNumber, pEntries);
		}

		HRESULT GetPixelShader(IDirect3DPixelShader9** ppShader) {
			return (*this)->GetPixelShader(ppShader);
		}

		HRESULT GetPixelShaderConstantB(UINT StartRegister,BOOL* pConstantData,UINT BoolCount) {
			return (*this)->GetPixelShaderConstantB(StartRegister, pConstantData, BoolCount);
		}

		HRESULT GetPixelShaderConstantF(UINT StartRegister,float* pConstantData,UINT Vector4fCount) {
			return (*this)->GetPixelShaderConstantF(StartRegister, pConstantData, Vector4fCount);
		}

		HRESULT GetPixelShaderConstantI(UINT StartRegister,int* pConstantData,UINT Vector4iCount) {
			return (*this)->GetPixelShaderConstantI(StartRegister, pConstantData, Vector4iCount);
		}

		HRESULT GetRasterStatus(UINT iSwapChain,D3DRASTER_STATUS* pRasterStatus) {
			return (*this)->GetRasterStatus(iSwapChain, pRasterStatus);
		}

		HRESULT GetRenderState(D3DRENDERSTATETYPE State,DWORD* pValue) {
			return (*this)->GetRenderState(State, pValue);
		}

		HRESULT GetRenderTarget(DWORD RenderTargetIndex,IDirect3DSurface9** ppRenderTarget) {
			return (*this)->GetRenderTarget(RenderTargetIndex, ppRenderTarget);
		}

		HRESULT GetRenderTargetData(IDirect3DSurface9* pRenderTarget,IDirect3DSurface9* pDestSurface) {
			return (*this)->GetRenderTargetData(pRenderTarget, pDestSurface);
		}

		HRESULT GetSamplerState(DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD* pValue) {
			return (*this)->GetSamplerState(Sampler, Type, pValue);
		}

		HRESULT GetScissorRect(RECT* pRect) {
			return (*this)->GetScissorRect(pRect);
		}

		HRESULT GetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer9** ppStreamData,UINT* OffsetInBytes,UINT* pStride) {
			return (*this)->GetStreamSource(StreamNumber, ppStreamData, OffsetInBytes, pStride);
		}

		HRESULT GetStreamSourceFreq(UINT StreamNumber,UINT* Divider) {
			return (*this)->GetStreamSourceFreq(StreamNumber, Divider);
		}

		HRESULT GetSwapChain(UINT iSwapChain,IDirect3DSwapChain9** pSwapChain) {
			return (*this)->GetSwapChain(iSwapChain, pSwapChain);
		}

		HRESULT GetTexture(DWORD Stage,IDirect3DBaseTexture9** ppTexture) {
			return (*this)->GetTexture(Stage, ppTexture);
		}

		HRESULT GetTextureStageState(DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD* pValue) {
			return (*this)->GetTextureStageState(Stage, Type, pValue);
		}

		HRESULT GetTransform(D3DTRANSFORMSTATETYPE State,D3DMATRIX* pMatrix) {
			return (*this)->GetTransform(State, pMatrix);
		}

		HRESULT GetVertexDeclaration(IDirect3DVertexDeclaration9** ppDecl) {
			return (*this)->GetVertexDeclaration(ppDecl);
		}

		HRESULT GetVertexShader(IDirect3DVertexShader9** ppShader) {
			return (*this)->GetVertexShader(ppShader);
		}

		HRESULT GetVertexShaderConstantB(UINT StartRegister,BOOL* pConstantData,UINT BoolCount) {
			return (*this)->GetVertexShaderConstantB(StartRegister, pConstantData, BoolCount);
		}

		HRESULT GetVertexShaderConstantF(UINT StartRegister,float* pConstantData,UINT Vector4fCount) {
			return (*this)->GetVertexShaderConstantF(StartRegister, pConstantData, Vector4fCount);
		}

		HRESULT GetVertexShaderConstantI(UINT StartRegister,int* pConstantData,UINT Vector4iCount) {
			return (*this)->GetVertexShaderConstantI(StartRegister, pConstantData, Vector4iCount);
		}

		HRESULT GetViewport(D3DVIEWPORT9* pViewport) {
			return (*this)->GetViewport(pViewport);
		}

		HRESULT LightEnable(DWORD Index,BOOL Enable) {
			return (*this)->LightEnable(Index, Enable);
		}

		HRESULT MultiplyTransform(D3DTRANSFORMSTATETYPE State,CONST D3DMATRIX* pMatrix) {
			return (*this)->MultiplyTransform(State, pMatrix);
		}

		HRESULT Present(CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion) {
			return (*this)->Present(pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
		}

		HRESULT ProcessVertices(UINT SrcStartIndex,UINT DestIndex,UINT VertexCount,IDirect3DVertexBuffer9* pDestBuffer,IDirect3DVertexDeclaration9* pVertexDecl,DWORD Flags) {
			return (*this)->ProcessVertices(SrcStartIndex, DestIndex, VertexCount, pDestBuffer, pVertexDecl, Flags);
		}

		HRESULT Reset(D3DPRESENT_PARAMETERS* pPresentationParameters) {
			return (*this)->Reset(pPresentationParameters);
		}

		HRESULT SetClipPlane(DWORD Index,CONST float* pPlane) {
			return (*this)->SetClipPlane(Index, pPlane);
		}

		HRESULT SetClipStatus(CONST D3DCLIPSTATUS9* pClipStatus) {
			return (*this)->SetClipStatus(pClipStatus);
		}

		HRESULT SetCurrentTexturePalette(UINT PaletteNumber) {
			return (*this)->SetCurrentTexturePalette(PaletteNumber);
		}

		HRESULT SetCursorProperties(UINT XHotSpot,UINT YHotSpot,IDirect3DSurface9* pCursorBitmap) {
			return (*this)->SetCursorProperties(XHotSpot, YHotSpot, pCursorBitmap);
		}

		HRESULT SetDepthStencilSurface(IDirect3DSurface9* pNewZStencil) {
			return (*this)->SetDepthStencilSurface(pNewZStencil);
		}

		HRESULT SetDialogBoxMode(BOOL bEnableDialogs) {
			return (*this)->SetDialogBoxMode(bEnableDialogs);
		}

		HRESULT SetFVF(DWORD FVF) {
			return (*this)->SetFVF(FVF);
		}

		HRESULT SetIndices(IDirect3DIndexBuffer9* pIndexData) {
			return (*this)->SetIndices(pIndexData);
		}

		HRESULT SetLight(DWORD Index,CONST D3DLIGHT9*) {
			return (*this)->SetLight(Index, D3DLIGHT9);
		}

		HRESULT SetMaterial(CONST D3DMATERIAL9* pMaterial) {
			return (*this)->SetMaterial(pMaterial);
		}

		HRESULT SetNPatchMode(float nSegments) {
			return (*this)->SetNPatchMode(nSegments);
		}

		HRESULT SetPaletteEntries(UINT PaletteNumber,CONST PALETTEENTRY* pEntries) {
			return (*this)->SetPaletteEntries(PaletteNumber, pEntries);
		}

		HRESULT SetPixelShader(IDirect3DPixelShader9* pShader) {
			return (*this)->SetPixelShader(pShader);
		}

		HRESULT SetPixelShaderConstantB(UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) {
			return (*this)->SetPixelShaderConstantB(StartRegister, pConstantData, BoolCount);
		}

		HRESULT SetPixelShaderConstantF(UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) {
			return (*this)->SetPixelShaderConstantF(StartRegister, pConstantData, Vector4fCount);
		}

		HRESULT SetPixelShaderConstantI(UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) {
			return (*this)->SetPixelShaderConstantI(StartRegister, pConstantData, Vector4iCount);
		}

		HRESULT SetRenderState(D3DRENDERSTATETYPE State,DWORD Value) {
			return (*this)->SetRenderState(State, Value);
		}

		HRESULT SetRenderTarget(DWORD RenderTargetIndex,IDirect3DSurface9* pRenderTarget) {
			return (*this)->SetRenderTarget(RenderTargetIndex, pRenderTarget);
		}

		HRESULT SetSamplerState(DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD Value) {
			return (*this)->SetSamplerState(Sampler, Type, Value);
		}

		HRESULT SetScissorRect(CONST RECT* pRect) {
			return (*this)->SetScissorRect(pRect);
		}

		HRESULT SetSoftwareVertexProcessing(BOOL bSoftware) {
			return (*this)->SetSoftwareVertexProcessing(bSoftware);
		}

		HRESULT SetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer9* pStreamData,UINT OffsetInBytes,UINT Stride) {
			return (*this)->SetStreamSource(StreamNumber, pStreamData, OffsetInBytes, Stride);
		}

		HRESULT SetStreamSourceFreq(UINT StreamNumber,UINT Divider) {
			return (*this)->SetStreamSourceFreq(StreamNumber, Divider);
		}

		HRESULT SetTexture(DWORD Stage,IDirect3DBaseTexture9* pTexture) {
			return (*this)->SetTexture(Stage, pTexture);
		}

		HRESULT SetTextureStageState(DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD Value) {
			return (*this)->SetTextureStageState(Stage, Type, Value);
		}

		HRESULT SetTransform(D3DTRANSFORMSTATETYPE State,CONST D3DMATRIX* pMatrix) {
			return (*this)->SetTransform(State, pMatrix);
		}

		HRESULT SetVertexDeclaration(IDirect3DVertexDeclaration9* pDecl) {
			return (*this)->SetVertexDeclaration(pDecl);
		}

		HRESULT SetVertexShader(IDirect3DVertexShader9* pShader) {
			return (*this)->SetVertexShader(pShader);
		}

		HRESULT SetVertexShaderConstantB(UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) {
			return (*this)->SetVertexShaderConstantB(StartRegister, pConstantData, BoolCount);
		}

		HRESULT SetVertexShaderConstantF(UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) {
			return (*this)->SetVertexShaderConstantF(StartRegister, pConstantData, Vector4fCount);
		}

		HRESULT SetVertexShaderConstantI(UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) {
			return (*this)->SetVertexShaderConstantI(StartRegister, pConstantData, Vector4iCount);
		}

		HRESULT SetViewport(CONST D3DVIEWPORT9* pViewport) {
			return (*this)->SetViewport(pViewport);
		}

		HRESULT StretchRect(IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestSurface,CONST RECT* pDestRect,D3DTEXTUREFILTERTYPE Filter) {
			return (*this)->StretchRect(pSourceSurface, pSourceRect, pDestSurface, pDestRect, Filter);
		}

		HRESULT TestCooperativeLevel() {
			return (*this)->TestCooperativeLevel();
		}

		HRESULT UpdateSurface(IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestinationSurface,CONST POINT* pDestPoint) {
			return (*this)->UpdateSurface(pSourceSurface, pSourceRect, pDestinationSurface, pDestPoint);
		}

		HRESULT UpdateTexture(IDirect3DBaseTexture9* pSourceTexture,IDirect3DBaseTexture9* pDestinationTexture) {
			return (*this)->UpdateTexture(pSourceTexture, pDestinationTexture);
		}

		HRESULT ValidateDevice(DWORD* pNumPasses) {
			return (*this)->ValidateDevice(pNumPasses);
		}

		BOOL GetSoftwareVertexProcessing() {
			return (*this)->GetSoftwareVertexProcessing();
		}

		BOOL ShowCursor(BOOL bShow) {
			return (*this)->ShowCursor(bShow);
		}

		UINT GetAvailableTextureMem() {
			return (*this)->GetAvailableTextureMem();
		}

		UINT GetNumberOfSwapChains() {
			return (*this)->GetNumberOfSwapChains();
		}

		float GetNPatchMode() {
			return (*this)->GetNPatchMode();
		}

		void GetGammaRamp(UINT iSwapChain,D3DGAMMARAMP* pRamp) {
			return (*this)->GetGammaRamp(iSwapChain, pRamp);
		}

		void SetCursorPosition(int X,int Y,DWORD Flags) {
			return (*this)->SetCursorPosition(X, Y, Flags);
		}

		void SetGammaRamp(UINT iSwapChain,DWORD Flags,CONST D3DGAMMARAMP* pRamp) {
			return (*this)->SetGammaRamp(iSwapChain, Flags, pRamp);
		}

